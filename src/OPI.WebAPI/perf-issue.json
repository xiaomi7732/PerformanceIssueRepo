[
  {
    "isActive": true,
    "permanentId": "a9e711cb-ca1d-4378-b689-92d1b03bc437",
    "title": "Incorrect Equality Comparison Implementation",
    "description": "Reflection is being used by Compare/Equality functions. This could be because of a missing \u0060Equals\u0060 override or incorrect \u0060IEquatable\u003CT\u003E\u0060/\u0060IEqualityComparer\u003CT\u003E\u0060 implementation.",
    "docURL": null,
    "recommendation": "This can be fixed by providing the missing \u0060Equals\u0060 override or properly implementing the \u0060IEquatable\u003CT\u003E\u0060/\u0060IEqualityComparer\u003CT\u003E\u0060 interface.",
    "rationale": null,
    "legacyId": "0"
  },
  {
    "isActive": true,
    "permanentId": "68ff5cc5-beaf-4c2e-b8f2-433c48af1708",
    "title": "Allocations in \u0060Equals\u0060/\u0060GetHashCode\u0060",
    "description": "Hot-path methods like \u0060Equals\u0060/\u0060GetHashCode\u0060 should be kept allocation free. LINQ methods tend to allocate enumerators on the Heap, while \u0060string.Format\u0060 leads to string allocations.",
    "docURL": null,
    "recommendation": "This can be fixed by removing calls to such methods. LINQ queries can be unrolled into loops. \u0060string.Format\u0060 can be replaced with a comparison of it\u0027s component strings.",
    "rationale": "{criteria}% of your {issueCategory} was spent in \u0060{symbol}\u0060, We expected this value to be {relation} {value}%.",
    "legacyId": "1"
  },
  {
    "isActive": true,
    "permanentId": "9346bb84-de05-44ca-b2ff-874eda19340e",
    "title": "Excessive Allocations Due to List/Dictionary Resizing",
    "description": "Too many allocations are being caused by resizing due to calls associated with List/Dictionary resizing.",
    "docURL": null,
    "recommendation": "Consider initializing the List/Dictionary with an explicit size if available or can be computed.",
    "rationale": null,
    "legacyId": "2"
  },
  {
    "isActive": true,
    "permanentId": "9095c47b-63d2-447a-ac64-7d6740226546",
    "title": "Excessive Allocations of Dictionaries/Lists/StringBuilder/HashSet Types",
    "description": "Too much CPU is spent in allocations of types like List, StringBuilder, Dictionary, HashSet etc., which can be reused.",
    "docURL": null,
    "recommendation": "This can be fixed by reusing instances of these types instead of allocating a new one every time.",
    "rationale": "",
    "legacyId": "3"
  },
  {
    "isActive": true,
    "permanentId": "3095f90e-3f92-4868-a30e-d645a4be2395",
    "title": "Inefficient String Concatenation",
    "description": "Excessive string concatenation is causing lots of allocations and CPU consumption.",
    "docURL": null,
    "recommendation": "Consider using cheaper alternatives such as \u0060String.Join\u0060 or a \u0060StringBuilder\u0060 instead.",
    "rationale": "",
    "legacyId": "4"
  },
  {
    "isActive": true,
    "permanentId": "4a8a2a45-6f67-474e-b307-79d8b507d466",
    "title": "Heap Allocations Due to Tuples",
    "description": "Tuples in C# are classes so they need to be allocated on the Heap. As a result, \u0060Dictionary\u003CK, V\u003E.FindEntry()\u0060 seems to be causing allocations.",
    "docURL": null,
    "recommendation": "Consider replacing \u0060Tuple\u0060 with \u0060ValueTuple\u0060, which are structs and are no allocated on the Heap.",
    "rationale": "",
    "legacyId": "5"
  },
  {
    "isActive": true,
    "permanentId": "d77d16b3-5af1-4b51-8d99-bc75c0b088a8",
    "title": "High CPU Costs Due to Expensive Methods",
    "description": "Expensive methods such as \u0060ConcurrentDictionary\u003CT1, T2\u003E.GetKeys()\u0060, \u0060Process.ProcessName\u0060, \u0060DateTime.Now\u0060, \u0060System.Type.GetType()\u0060, \u0060GetCustomAttributes()\u0060, etc. are consuming a lot of CPU.",
    "docURL": null,
    "recommendation": "Consider caching the results of these methods.",
    "rationale": "",
    "legacyId": "6"
  },
  {
    "isActive": true,
    "permanentId": "63a56899-bfd2-4cf5-aae4-a781df3799e8",
    "title": "\u0060CopyTo\u0060 Taking Too Much CPU",
    "description": "\u0060CopyTo\u0060 is taking a lot of CPU. This may be because of the buffer size being too small.",
    "docURL": null,
    "recommendation": "Consider increasing the buffer size supplied to the \u0060CopyTo\u0060 method.",
    "rationale": "",
    "legacyId": "7"
  },
  {
    "isActive": true,
    "permanentId": "f7d870e1-c929-49fa-a59f-bf8e034edeb1",
    "title": "\u0060Activator.CreateInstance\u0060 Taking Too Much CPU",
    "description": "\u0060Activator.CreateInstance\u0060 takes up a lot of CPU because it is implemented using Reflection.",
    "docURL": null,
    "recommendation": "Consider using alternatives such as passing in an allocation delegate, compiled lambdas or emitting IL.",
    "rationale": "",
    "legacyId": "8"
  },
  {
    "isActive": true,
    "permanentId": "82a95bad-3d44-4d94-8075-449394c1859d",
    "title": "\u0060Regex.IsMatch\u0060 Taking Too Much CPU",
    "description": "\u0060Regex.IsMatch\u0060 is taking up a lot of CPU.",
    "docURL": null,
    "recommendation": "Consider using a compiled regex using \u0060RegexOptions.Compiled\u0060 or compiling to assembly using \u0060RegexOptions.CompileToAssembly\u0060.",
    "rationale": "",
    "legacyId": "9"
  },
  {
    "isActive": true,
    "permanentId": "3252749a-c8cf-4055-9a66-c0ba16f7703c",
    "title": "Excessive Allocations Due to \u0060System.Stream.ReadByte()\u0060/\u0060System.Stream.WriteByte()\u0060",
    "description": "When deriving from \u0060System.Stream\u0060, the default implementations of \u0060ReadByte\u0060/\u0060WriteByte\u0060 would be used unless overridden. These methods allocate a single byte array upon each run, which can lead to a lot of Heap allocations.",
    "docURL": null,
    "recommendation": "Make sure you are not missing overrides of \u0060ReadByte\u0060/\u0060WriteByte\u0060 when deriving \u0060System.Stream\u0060 and using a cached buffer.",
    "rationale": "",
    "legacyId": "10"
  },
  {
    "isActive": true,
    "permanentId": "3c56330d-ca86-4ea6-a7a4-c97c9e08418d",
    "title": "\u0060IEnumerable\u003CT\u003E.Count()\u0060 Taking Too Much CPU/Memory",
    "description": "Calling \u0060IEnumerable\u003CT\u003E.Count()\u0060, causes the entire enumerable to be enumerated. This can lead to multiple enumeration if \u0060IEnumerable\u003CT\u003E.Count()\u0060 is called on the same enumerable from multiple locations.",
    "docURL": null,
    "recommendation": "Make sure the same enumerable is not being enumerated on multiple times. If more than one calls are found and the enumerable doesn\u0027t change between successive calls to \u0060Count()\u0060, consider caching and re-using the results.\nOther options are to use \u0060List\u003CT\u003E\u0060 to get access to \u0060Count\u0060 property, or check if the enumerable is an \u0060ICollection\u003CT\u003E\u0060 underneath to avoid having to call \u0060ToList()\u0060.\nUse \u0060IEnumerable\u003CT\u003E.Any()\u0060 if count is only used to check whether the enumerable is non-empty.",
    "rationale": "",
    "legacyId": "11"
  },
  {
    "isActive": true,
    "permanentId": "a41d3cf0-29c2-41bc-a01a-6e38d77db0ad",
    "title": "\u0060IEnumerable\u003CT\u003E.ElementAt()\u0060 Taking Too Much CPU/Memory",
    "description": "\u0060ElementAt\u0060 iterates over the entire enumerable to find the element at a specific index.",
    "docURL": null,
    "recommendation": "Consider using \u0060List\u003CT\u003E\u0060 as it has constant access to elements by index.",
    "rationale": "",
    "legacyId": "12"
  },
  {
    "isActive": true,
    "permanentId": "991d40cb-6bf7-46ba-97d4-3b460273a659",
    "title": "\u0060List\u003CT\u003E.Contains()\u0060 Taking Up Too Much CPU",
    "description": "\u0060List\u003CT\u003E.Contains()\u0060 needs to iterate over the \u0060List\u0060 to check if an element exists, which tends to be O(N) in the worst case.",
    "docURL": null,
    "recommendation": "Consider using a \u0060HashSet\u003CT\u003E\u0060 instead of a \u0060List\u003CT\u003E\u0060 or maintaining one in addition to the \u0060List\u0060.",
    "rationale": "",
    "legacyId": "13"
  },
  {
    "isActive": true,
    "permanentId": "9e7e6b7d-c3a7-4b07-81ef-ed305b58d22f",
    "title": "\u0060ContainsKey\u0060 Taking Too Much CPU",
    "description": "Using \u0060Dictionary\u003CK, V\u003E.ContainsKey()\u0060 along with a \u0060Dictionary\u0060 lookup can lead to double dictionary lookup anti-pattern.",
    "docURL": null,
    "recommendation": "Consider replacing \u0060Dictionary\u003CK, V\u003E.ContainsKey()\u0060 and lookup with \u0060Dictionary\u003CK, V\u003E.TryGetValue()\u0060, which is more optimal as it avoids the double cost of checking if a key exists in the \u0060Dictionary\u0060 and then accessing the corresponding value, and instead gets both results in a single call.",
    "rationale": "",
    "legacyId": "14"
  },
  {
    "isActive": true,
    "permanentId": "210fc8b5-d654-4813-b44f-296c4f6a2df7",
    "title": "\u0060ConcurrentDictionary\u003CK, V\u003E.Count\u0060 Taking Too Much CPU",
    "description": "\u0060ConcurrentDictionary\u003CK, V\u003E.Count\u0060 takes a lock and calling it too frequently can cause CPU bottlenecks.",
    "docURL": null,
    "recommendation": "Consider keeping a cached local count and updating it using \u0060Interlocked.Increment\u0060/\u0060Decrement\u0060.",
    "rationale": "",
    "legacyId": "15"
  },
  {
    "isActive": true,
    "permanentId": "2e20ddea-ae18-465c-b74e-3df385578ad6",
    "title": "\u0060IEnumerable\u003CT\u003E.OrderBy().FirstOrDefault()\u0060 Taking Too Much CPU/Memory",
    "description": "LINQ query \u0060IEnumerable\u003CT\u003E.OrderBy().FirstOrDefault()\u0060 sorts the entire enumerable only to get the smallest/largest element, which can be very slow because of having O(N*log(N)) complexity.",
    "docURL": null,
    "recommendation": "This can be done in O(N) by simply iterating over the enumerable and getting the smallest/largest element or using \u0060MinBy\u0060/\u0060MaxBy\u0060 on the \u0060IEnumerable\u003CT\u003E\u0060.",
    "rationale": "",
    "legacyId": "16"
  },
  {
    "isActive": true,
    "permanentId": "23a5db7d-682e-42f7-928d-abb061a755cc",
    "title": "\u0060Array.Reverse()\u0060 Taking Too Much CPU/Memory Due to Boxing",
    "description": "\u0060Array.Reverse\u0060 is a non-generic method and is implemented using boxing.",
    "docURL": null,
    "recommendation": "Consider implementing your own reverse function.",
    "rationale": "",
    "legacyId": "17"
  },
  {
    "isActive": true,
    "permanentId": "3f51a46a-39c3-462e-ab77-f3f15ca60f1f",
    "title": "Lock Contention in \u0060TraceSource.TraceData()\u0060",
    "description": "\u0060TraceSource.TraceData()\u0060 is taking up a lot of CPU due to lock contention.",
    "docURL": null,
    "recommendation": "Avoid using \u0060TraceSource.TraceData()\u0060, or make sure all listeners are thread-safe to turn off locking.",
    "rationale": "",
    "legacyId": "18"
  },
  {
    "isActive": true,
    "permanentId": "d19b35dd-29e6-4a1a-9576-864123829a05",
    "title": "Unnecessary String Allocations and CPU Usage Due to \u0060String.Split()\u0060",
    "description": "\u0060String.Split()\u0060 can lead to unnecessary string allocations and CPU usage.",
    "docURL": null,
    "recommendation": "Consider using cheaper alternatives.",
    "rationale": "",
    "legacyId": "19"
  },
  {
    "isActive": true,
    "permanentId": "7538665d-770d-40fb-851e-2c133f8ef4ed",
    "title": "Expensive \u0060IEnumerable\u003CT\u003E.ToList()\u0060 in Getter",
    "description": "An expensive call to \u0060IEnumerable\u003CT\u003E.ToList()\u0060 is being made from a getter.",
    "docURL": null,
    "recommendation": "Consider memoizing the results of \u0060ToList\u0060 to make the getter as cheap as possible.",
    "rationale": "",
    "legacyId": "20"
  },
  {
    "isActive": true,
    "permanentId": "2efbfd50-159a-42f7-88b9-4e5ad37de914",
    "title": "\u0060IEnumerable\u003CT\u003E.ToList()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being spent in \u0060IEnumerable\u003CT\u003E.ToList()\u0060.",
    "docURL": null,
    "recommendation": "Consider using \u0060List\u003CT\u003E\u0060 from the start to avoid expensive calls to ToList(). Also, verify that \u0060IEnumerable\u003CT\u003E.ToList()\u0060 isn\u0027t being called for a single enumeration, which can be accomplished simply by enumerating over the \u0060IEnumerable\u003CT\u003E\u0060.",
    "rationale": "",
    "legacyId": "21"
  },
  {
    "isActive": true,
    "permanentId": "889dd9ee-4eb0-43d0-9817-e10991ab4665",
    "title": "Unnecessary Allocations and CPU Cost Due to Boxing",
    "description": "Boxing is used to store value types in the garbage-collected heap. Boxing is an implicit conversion of a value type to the type object or to any interface type implemented by this value type. Boxing a value type allocates an object instance on the heap and copies the value into the new object.\nBoxing and unboxing are computationally expensive processes. When a value type is boxed, a new object must be allocated and constructed. To a lesser degree, the cast required for unboxing is also expensive computationally.",
    "docURL": null,
    "recommendation": "It is best to avoid using value types in situations where they must be boxed a high number of times, for example in non-generic collections classes such as \u0060Collections.ArrayList\u0060. You can avoid boxing of value types by using generic collections such as \u0060List\u003CT\u003E\u0060.",
    "rationale": "",
    "legacyId": "22"
  },
  {
    "isActive": true,
    "permanentId": "dfebc4ff-775b-406e-a365-5e225d6a52ee",
    "title": "Too Much Exception Handling",
    "description": "CPU Bottlenecks are showing up due to excessive exception handling.",
    "docURL": null,
    "recommendation": "Investigate why so many exceptions are being thrown, as this may be due to an underlying bug.",
    "rationale": "",
    "legacyId": "23"
  },
  {
    "isActive": true,
    "permanentId": "cfe41042-b355-46b6-8933-32e6d378dd00",
    "title": "Garbage Collection Showing Up in CPU Trace",
    "description": "Induced Garbage Collection (GC) is showing up as a bottleneck in CPU trace.",
    "docURL": null,
    "recommendation": "Look at the allocation data and your code to make sure there are no unnecessary allocations.",
    "rationale": "",
    "legacyId": "24"
  },
  {
    "isActive": true,
    "permanentId": "cf44c716-6455-4dc0-9fa4-343a212444e1",
    "title": "\u0060X509Certificate.X509Chain.Build\u0060 Taking Too Much CPU",
    "description": "\u0060X509Chain.Build\u0060 is called on each request, instead of being cached.",
    "docURL": null,
    "recommendation": "Consider using a newer version of .NET (\u003E5), which caches the chain result so that it is not built on each request. Also, if you are using containers, consider switching to Windows containers as they have faster X509 chain building.",
    "rationale": "",
    "legacyId": "25"
  },
  {
    "isActive": true,
    "permanentId": "4810b7ad-dcb2-483a-b6af-6bf7562b1fe6",
    "title": "Lock Contention Appearing in CPU Trace",
    "description": "Lock contention occurs when a thread waits for a lock while another thread possesses that lock. Contentious locks can be bad for your application\u0027s throughput and lead to scalability issues.",
    "docURL": null,
    "recommendation": "Consider options like reducing lock granularity, using a lock-free library or re-writing the code such that it doesn\u0027t require a lock.",
    "rationale": "",
    "legacyId": "26"
  },
  {
    "isActive": true,
    "permanentId": "cfa35fd6-1c4a-411a-9e56-d4b6989e1b73",
    "title": "Active Directory Taking Too Much CPU/Memory",
    "description": "Active Directory is causing CPU bottlenecks and allocations.",
    "docURL": null,
    "recommendation": "Consider switching from Active Directory Authentication Library (ADAL) to Microsoft Authentication Library (MSAL).",
    "rationale": "",
    "legacyId": "27"
  },
  {
    "isActive": true,
    "permanentId": "bb77a27d-7115-415d-9205-d1efde790f78",
    "title": "String.ToLower() Taking Too Much CPU/Memory",
    "description": "ToLower is taking a lot of CPU/Memory. This may be because of repeat calls to ToLower on the same set of strings.",
    "docURL": null,
    "recommendation": "Consider using CaseInsensitive comparisons or caching the results of ToLower.",
    "rationale": "",
    "legacyId": "28"
  },
  {
    "isActive": true,
    "permanentId": "cdf08e8f-36e5-4024-9110-7b887ba6f112",
    "title": "Inefficient \u0060String.SubString()\u0060",
    "description": "Excessive \u0060String.SubString()\u0060 is causing lots of allocations and CPU consumption.",
    "docURL": null,
    "recommendation": "Consider using cheaper alternatives such as \u0060String.AsSpan()\u0060.",
    "rationale": "",
    "legacyId": "29"
  },
  {
    "isActive": true,
    "permanentId": "86763918-4391-47e7-ab4d-e83b1b06066a",
    "title": "Calls To Static Regex Functions Causing Contention",
    "description": "Static Regex calls are causing contention in the Regex cache.",
    "docURL": null,
    "recommendation": "Consider creating an instance of the \u0060Regex\u0060 and call the member method \u0060IsMatch\u0060\\\u0060Match\u0060\\\u0060Split\u0060 instead of calling the static variants.",
    "rationale": "",
    "legacyId": "30"
  },
  {
    "isActive": true,
    "permanentId": "7c07a45a-9234-419d-95d1-6b3b77d38219",
    "title": "Excessive Calls to \u0060Enum.ToString()\u0060",
    "description": "Excessive \u0060Enum.ToString()\u0060 causing lots of allocations.",
    "docURL": null,
    "recommendation": "Consider caching \u0060Enum.ToString()\u0060 results in a dictionary.",
    "rationale": "",
    "legacyId": "31"
  },
  {
    "isActive": true,
    "permanentId": "c96149cd-8d3c-4f09-9854-76ed3f5405ae",
    "title": "High CPU/Memory Costs Due to Logging",
    "description": "Too much CPU/Memory is being spent in logging.",
    "docURL": null,
    "recommendation": "Check logging levels and reduce the volume of logs in production. Consider tweaking level for each category. Also consider high performance logging (Reference: https://aka.ms/AAfkq94).",
    "rationale": "",
    "legacyId": "32"
  },
  {
    "isActive": true,
    "permanentId": "51eb34e8-6c6b-4442-952f-c53e4a97f67f",
    "title": "Too Much CPU/Memory Taken by LINQ Query Chaining \u0060IEnumerable\u003CT\u003E.Where()\u0060 and \u0060IEnumerable\u003CT\u003E.Count()\u0060",
    "description": "Nested \u0060Where\u0060 calls would lead to multiple passes over the enumerable leading to unnecessary CPU usage as well as iterator allocations.",
    "docURL": null,
    "recommendation": "Consider condensing the chain of \u0060IEnumerable\u003CT\u003E.Where(\u003Clambda function\u003E).Count()\u0060 to simply a \u0060IEnumerable\u003CT\u003E.Count(\u003Clambda function\u003E)\u0060.",
    "rationale": "",
    "legacyId": "33"
  },
  {
    "isActive": true,
    "permanentId": "867032d6-7d2d-4edd-9f6c-fa132ca45fdd",
    "title": "Excessive Allocations of \u0060KeyVaultClient\u0060 Type",
    "description": "Too many allocations of type \u0060KeyVaultClient\u0060, which need not be re-allocated if an instance pointing to the same Key Vault already exists.",
    "docURL": null,
    "recommendation": "Consider reusing \u0060KeyVaultClient\u0060 instances.",
    "rationale": "",
    "legacyId": "34"
  },
  {
    "isActive": true,
    "permanentId": "93f5643f-7bb6-45f0-947e-73f48e27c8da",
    "title": "\u0060IEnumerable\u003CT\u003E.Any()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being consumed by \u0060IEnumerable\u003CT\u003E.Any()\u0060 calls.",
    "docURL": null,
    "recommendation": "Consider unrolling the LINQ expression to use an explicit for-loop.\nIn case of nested LINQ expressions, make sure that same computations are not being repeated unnecessarily.\nIf possible, hoist them to the outermost loop where they can be computed.",
    "rationale": "",
    "legacyId": "35"
  },
  {
    "isActive": true,
    "permanentId": "233a5e73-1b97-4b8f-bdce-7ff32a19ae0a",
    "title": "\u0060Dictionary\u003CK, V\u003E.FindEntry()\u0060 Taking Too Much CPU",
    "description": "A lot of exclusive CPU time is being spent in \u0060Dictionary\u003CK, V\u003E.FindEntry()\u0060 calls.",
    "docURL": null,
    "recommendation": "This often happens when a Dictionary gets corrupted due to unguarded concurrent writes.\nIf this is occurring, consider using a ConcurrentDictionary instead or appropriate lock protection.",
    "rationale": "",
    "legacyId": "36"
  },
  {
    "isActive": true,
    "permanentId": "9887cafc-662a-4535-8507-cbc350e8b63b",
    "title": "\u0060Newtonsoft.Json.JsonConvert.SerializeObject()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU and memory are being spent on calls to \u0060Newtonsoft.Json.JsonConvert.SerializeObject()\u0060.",
    "docURL": null,
    "recommendation": "Make sure you\u0027re not recreating a \u0060ContractResolver\u0060 every time you use \u0060JsonSerializer\u0060. Instead, you should create the contract resolver once and reuse it. Please note that if you are not using an explicit contract resolver, then a shared internal instance is automatically used when serializing and deserializing.\n\nIf you have .NET 5 SDK or above, consider switching to \u0060System.Text.Json\u0060 to use source generation, regardless of the .NET version you target. Source generation allows for the inspection of serializable types to be done at compile time instead of needing to use reflection at runtime and is, therefore, able to provide much better performance.\n\nPlease note that when using \u0060System.Text.Json\u0060, if you need to use \u0060JsonSerializerOptions\u0060 repeatedly with the same options, consider reusing the same \u0060JsonSerializerOptions\u0060 instance for each call to Serialize/Deserialize. Since the instance is thread-safe and immutable after the first serialization or deserialization, it\u0027s safe to use the same instance.",
    "rationale": "",
    "legacyId": "37"
  },
  {
    "isActive": true,
    "permanentId": "cbf057a5-f58e-4b9d-bdb1-a15941bde5bc",
    "title": "\u0060Newtonsoft.Json.JsonConvert.DeserializeObject()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU and memory are being spent on calls to \u0060Newtonsoft.Json.JsonConvert.DeserializeObject()\u0060.",
    "docURL": null,
    "recommendation": "Make sure you\u0027re not recreating a \u0060ContractResolver\u0060 every time you use \u0060JsonSerializer\u0060. Instead, you should create the contract resolver once and reuse it. Please note that if you are not using an explicit contract resolver, then a shared internal instance is automatically used when serializing and deserializing.\n\nIf you have .NET 5 SDK or above, consider switching to \u0060System.Text.Json\u0060 to use source generation, regardless of the .NET version you target. Source generation allows for the inspection of serializable types to be done at compile time instead of needing to use reflection at runtime and is, therefore, able to provide much better performance.\n\nPlease note that when using \u0060System.Text.Json\u0060, if you need to use \u0060JsonSerializerOptions\u0060 repeatedly with the same options, consider reusing the same \u0060JsonSerializerOptions\u0060 instance for each call to Serialize/Deserialize. Since the instance is thread-safe and immutable after the first serialization or deserialization, it\u0027s safe to use the same instance.",
    "rationale": "",
    "legacyId": "38"
  },
  {
    "isActive": true,
    "permanentId": "4b8e9c5d-34b7-480b-8393-4cb74a0afcf7",
    "title": "\u0060IEnumerable\u003CT\u003E.Single()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being consumed by \u0060IEnumerable\u003CT\u003E.Single()\u0060 calls.",
    "docURL": null,
    "recommendation": "Consider unrolling the LINQ expression to use an explicit for-loop.\nIn case of nested LINQ expressions, make sure that same computations are not being repeated unnecessarily.\nIf possible, hoist them to the outermost loop where they can be computed.",
    "rationale": "",
    "legacyId": "39"
  },
  {
    "isActive": true,
    "permanentId": "67b8a6d1-1a2c-4c1a-bf9c-9f5778f69dee",
    "title": "\u0060IEnumerable\u003CT\u003E.FirstOrDefault()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being consumed by \u0060IEnumerable\u003CT\u003E.FirstOrDefault()\u0060 calls.",
    "docURL": null,
    "recommendation": "Consider unrolling the LINQ expression to use an explicit for-loop.\nIn case of nested LINQ expressions, make sure that same computations are not being repeated unnecessarily.\nIf possible, hoist them to the outermost loop where they can be computed.",
    "rationale": "",
    "legacyId": "40"
  },
  {
    "isActive": true,
    "permanentId": "5586dc2a-8493-4006-8f5c-5dbb00c44229",
    "title": "\u0060IEnumerable\u003CT\u003E.Aggregate()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being consumed by \u0060IEnumerable\u003CT\u003E.Aggregate()\u0060 calls.",
    "docURL": null,
    "recommendation": "Consider unrolling the LINQ expression to use an explicit for-loop.\nIn case of nested LINQ expressions, make sure that same computations are not being repeated unnecessarily.\nIf possible, hoist them to the outermost loop where they can be computed.",
    "rationale": "",
    "legacyId": "41"
  },
  {
    "isActive": true,
    "permanentId": "e892ab76-8c7a-4203-af18-a7823b31386a",
    "title": "\u0060Enumerable\u003CT\u003E.ToArray()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being spent in \u0060Enumerable\u003CT\u003E.ToArray()\u0060.",
    "docURL": null,
    "recommendation": "Verify that \u0060Enumerable\u003CT\u003E.ToArray()\u0060 isn\u0027t being called for a single enumeration, which can be accomplished simply by enumerating over the \u0060Enumerable\u003CT\u003E\u0060.",
    "rationale": "",
    "legacyId": "42"
  },
  {
    "isActive": true,
    "permanentId": "1353f344-ea43-44f3-99cf-6ac7e7f7237a",
    "title": "\u0060Enumerable\u003CT\u003E.ToDictionary()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being spent in \u0060Enumerable\u003CT\u003E.ToDictionary()\u0060.",
    "docURL": null,
    "recommendation": "Verify that \u0060Enumerable\u003CT\u003E.ToDictionary()\u0060 isn\u0027t being called for a few look-ups in the resulting \u0060Dictionary\u003CK, V\u003E\u0060. This can instead be accomplished simply by enumerating over the \u0060Enumerable\u003CT\u003E\u0060.",
    "rationale": "",
    "legacyId": "43"
  },
  {
    "isActive": true,
    "permanentId": "b9f34b5c-3c92-43ab-aa57-e02c2bcf9ee6",
    "title": "\u0060Queryable\u003CT\u003E.FirstOrDefault()\u0060 Taking Too Much CPU/Memory",
    "description": "A lot of CPU or Memory is being spent in \u0060Queryable\u003CT\u003E.FirstOrDefault()\u0060.",
    "docURL": null,
    "recommendation": "Examine the query and simplify the expression if possible.",
    "rationale": "",
    "legacyId": "44"
  },
  {
    "isActive": true,
    "permanentId": "0be5bb8f-d2a1-403d-94e7-3b0fa4e62ad6",
    "title": "\u0060StreamReader.ReadToEnd()\u0060 Taking Too Much Memory",
    "description": "A lot of Memory is being consumed by \u0060StreamReader.ReadToEnd()\u0060.",
    "docURL": null,
    "recommendation": "If the underlying stream is expected to be in JSON format, consider using a JSON parser directly over the stream rather than reading to a string and then parsing the resulting string.",
    "rationale": "",
    "legacyId": "45"
  },
  {
    "isActive": true,
    "permanentId": "1eabc3f5-c470-4829-902f-0be5f8a38b66",
    "title": "\u0060CompareInfo.IsPrefix()\u0060 Taking Too Much CPU",
    "description": "A lot of CPU is being spent doing culture specific comparisons within calls to \u0060CompareInfo.IsPrefix()\u0060.",
    "docURL": null,
    "recommendation": "Consider specifying a \u0060StringComparison.Ordinal\u0060 comparison with \u0060String.StartsWith\u0060/\u0060String.EndsWith\u0060 to avoid doing culture specific string comparisons, which tend to be more expensive.",
    "rationale": "",
    "legacyId": "46"
  },
  {
    "isActive": true,
    "permanentId": "220f26e5-3670-439f-a197-63897251b4b6",
    "title": "\u0060String.IndexOf()\u0060 Taking Too Much CPU",
    "description": "A lot of CPU is being spent doing culture specific comparisons within calls to \u0060String.IndexOf()\u0060.",
    "docURL": null,
    "recommendation": "Consider specifying a \u0060StringComparison.Ordinal\u0060 comparison with \u0060String.IndexOf\u0060 to avoid doing culture specific string comparisons, which tend to be more expensive.",
    "rationale": "",
    "legacyId": "47"
  },
  {
    "isActive": true,
    "permanentId": "ef41de0e-0b00-45ff-8f9a-1c7530c06d91",
    "title": "\u0060Dictionary\u003CK, V\u003E.Insert()\u0060 Taking Too Much CPU Due To \u0060ObjectEqualityComparer\u0060",
    "description": "A lot of CPU is being spent on calls to \u0060Dictionary\u003CK, V\u003E.Insert()\u0060.",
    "docURL": null,
    "recommendation": "Avoid using the default object comparer. Consider writing a custom comparer for the Dictionary Key type and specifying it in the Dictionary\u0027s constructor. Alternatively, implement \u0060IEquatable\u003CTKey\u003E\u0060 on the Key type. Either of these will lead to faster comparisons than the default object comparer.",
    "rationale": "",
    "legacyId": "48"
  },
  {
    "isActive": true,
    "permanentId": "70472c33-0a67-4a1a-a2d5-8284c449a3b7",
    "title": "\u0060Dictionary\u003CK, V\u003E.Insert()\u0060 Taking Too Much CPU",
    "description": "A lot of CPU is being spent on calls to \u0060Dictionary\u003CK, V\u003E.Insert()\u0060.",
    "docURL": null,
    "recommendation": "Make sure Dictionary entries are actually being re-used in look-ups.",
    "rationale": "",
    "legacyId": "49"
  },
  {
    "isActive": true,
    "permanentId": "5e8edd39-27f0-49be-b99c-572b9a4d536b",
    "title": "Excessive Allocations of \u0060System.Text.RegularExpressions.Regex\u0060",
    "description": "A lot of memory is spent in allocations of type \u0060System.Text.RegularExpressions.Regex\u0060.",
    "docURL": null,
    "recommendation": "Avoid creating Regex instances more than once with the same regular expression. If the regular expression is the same each time, then cache a single Regex instance in a static field.",
    "rationale": "",
    "legacyId": "50"
  }
]